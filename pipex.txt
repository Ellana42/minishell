Pipe : rediriger la sortie standard d'un processus vers l'entree standard d'un autre

cat test.txt | wc -l : redirection de la stdout de cat vers la stdin de wc

Normalement cat test.txt affiche le contenu dans la stdout (terminal) mais ici le resultat sera
envoye dans un tube où wc ira piocher ses donnes plutot que dans la stdin

+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+
|                       Entrée standard                      |
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+
										|
										X
[=======]          +===============+    |    [=======]
[  cat  ] ---+---> |  Tube (Pipe)  | ---+--> [  wc   ] ---+
[=======]    |     +===============+         [=======]    |
			 X                                            |
			 |                                            v
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+
|                       Sortie standard                      |
+::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::+

				[========]
		   +--> [  Père  ] -->---------+
		   |    [========]             |
		   |                           |
		   |                           |
		   |    +=================+    |
pipefd[0]  +<-- |      (Pipe)     | <--+  pipefd[1]
(lecture)  |    +=================+    |  (écriture)
		   |                           |
		   |                           |
		   |    [========]             |
		   +--> [  Fils  ] -->---------+
				[========]

Chaque commande shell = un programme

•execve() pour executer un programme depuis le programme actuel
•access() pour verifier les permissions a un fichier
•fork() pour creer des processus
•waitpid() pour suspendre l'exe du proessus appelant en attendant qu'un fils change d'etat
•pipe() pour faire communiquer deux processus
•dup2() pour rediriger les descripteurs de fichiers (faire en sorte que le processus fils ecrive
dans l'extremite ecriture du tube (fd[1]) plutot que dans la sortie standard (stdout) afin que le processus pere
puisse lire dans l'extremite lecture du tube (fd[0]) a la place de l'entree standard (stdin)
•strerror() pour la gestion d'erreur. Se base sur la variable errno contenant un int indiquant la nature
de l'erreur, fourni par l'appel systeme lui meme. L'erreur doit etre print sur la sortie d'erreur !

pipe()
  |
  +--- fork()
		 |
		 +--- fils1 [cmd1]
		 |      +-- dup2(fd_entree, STDIN))
		 |      +-- dup2(pipe[1], STDOUT)
		 |      +-- close(pipe[0])
		 |      +-- close(pipe[1])
		 |      +-- ft_split les options de commande
		 |          et chercher le bon chemin
		 |      +-- execve(cmd1_chemin, options, envp)
		 |
		 +--- fils2 [cmd2]
		 |      +-- dup2(pipe[0], STDIN)
		 |      +-- dup2(fd_sortie, STDOUT)
		 |      +-- close(pipe[0])
		 |      +-- close(pipe[1])
		 |      +-- ft_split les options de commande
		 |          et chercher le bon chemin
		 |      +-- execve(cmd2_chemin, options, envp)
		 |
		 +--- pere
				+-- close(pipe[0])
				+-- close(pipe[1])
				+-- close(fd_entree)
				+-- close(fd_sortie)
				+-- waitpid(pid1, status, 0)
				+-- waitpid(pid2, status, 0)

----------------------------------------------------------------------------------------------------------------
MULTIPIPE

Boucle qui creer des processus fils tant qu'on arrive pas a la fin des arguments entres par l'user.

Creer une paire de fd pour chaque processus, pour eviter qu'ils se battent pour ecrire et lire dans le meme tube
puisqu'ils sont executes en simultane.

Ainsi, le premier processus pourra erire dans la sortie de son propre pipe, puis le 2e processus pourra
lire depuis le tube du 1er processus et ecrire dans sa propre sortie etc.

Fichier entrée
==============
	|
	|   +--------+
	+-->| Fils 0 |---+
		+--------+   |
					 |
  fd 0  +========+   |
	+---| TUBE 0 |<--+
	|   +========+  fd 1
	|
	|   +--------+
	+-->| Fils 1 |---+
		+--------+   |
					 |
  fd 2  +========+   |
	+---| TUBE 1 |<--+
	|   +========+  fd 3
	|
	|   +--------+
	+-->| Fils 2 |---+
		+--------+   |
					 |
  fd 4  +========+   |
	+---| TUBE 2 |<--+
	|   +========+  fd 5
	|
	|   +--------+
	+-->| Fils 3 |---+
		+--------+   |
					 |
					 V
				==============
				Fichier sortie

INDEX FILS	FD LECTURE	FD ECRITURE
	0			File		1
	1			0			3
	2			2			5
	3			4			File

Chaque fils, sauf le 1er, lit depuis le pipefd[2 * index - 2]
Tous les fils, sauf le dernier, ecrivent sur le pipedfd[2 * index + 1]

A ne pas oublier : close tous les fd non utilises dans chaque childs